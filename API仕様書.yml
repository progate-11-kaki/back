openapi: 3.0.0
info:
  title: プロジェクト管理API
  description: "このAPIは、プロジェクト作成、ユーザー招待、通知管理、コミット管理などの機能を提供します。"
  version: 1.0.0

servers:
  - url: http://localhost:5000
    description: ローカルサーバー

paths:
  /uploads/{filename}:
    get:
      summary: "アップロードしたファイルを取得"
      description: "指定されたファイル名のファイルを取得します。"
      parameters:
        - name: filename
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "ファイルを取得しました。"
        404:
          description: "ファイルが見つかりません。"

  /:
    get:
      summary: ホーム画面データ取得
      description: 認証済みユーザーがアクセス可能なホーム画面データを取得します。公開されているプロジェクトとユーザーの通知情報を含みます。
      parameters:
        - name: search
          in: query
          required: false
          schema:
            type: string
          description: 検索クエリ。プロジェクト名または説明で部分一致する文字列を検索します。
      responses:
        "200":
          description: 成功時にプロジェクトリストと通知リストを返します
          content:
            application/json:
              schema:
                type: object
                properties:
                  projects:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: プロジェクトのID
                        name:
                          type: string
                          description: プロジェクト名
                        description:
                          type: string
                          description: プロジェクトの説明
                  notifications:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: 通知のID
                        message:
                          type: string
                          description: 通知メッセージ
  
  /login:
    post:
      summary: "ログイン"
      description: "ユーザーがログインします。"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: "ログインに成功しました。"
        401:
          description: "ユーザー名またはパスワードが無効です。"

  /logout:
    get:
      summary: "ログアウト"
      description: "ユーザーがログアウトします。"
      responses:
        200:
          description: "ログアウトしました。"

  /register:
    post:
      summary: "ユーザー登録"
      description: "新しいユーザーを登録します。"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                password2:
                  type: string
      responses:
        201:
          description: "ユーザー登録が完了しました。"
        400:
          description: "パスワードが一致しません。"

  /profile/{user_id}:
    get:
      summary: "ユーザーのプロフィール情報を取得"
      description: "指定したユーザーIDのプロフィール情報を取得します。"
      parameters:
        - name: "user_id"
          in: "path"
          required: true
          description: "ユーザーのID"
          schema:
            type: "integer"
      responses:
        "200":
          description: "ユーザーのプロフィール情報"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  username:
                    type: "string"
                    example: "john_doe"
                  projects:
                    type: "array"
                    items:
                      type: "object"
                      properties:
                        id:
                          type: "integer"
                          example: 1
                        name:
                          type: "string"
                          example: "Project A"
                        latest_commit_image:
                          type: "string"
                          example: "/path/to/latest_commit_image.png"
                  profile_image:
                    type: "string"
                    example: "/path/to/profile_image.png"
        "401":
          description: "認証エラー。トークンが無効または未提供。"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "無効なトークンです"

    post:
      summary: "プロフィール画像を更新"
      description: "ユーザーのプロフィール画像を更新します。"
      parameters:
        - name: "user_id"
          in: "path"
          required: true
          description: "ユーザーのID"
          schema:
            type: "integer"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: "object"
              properties:
                profile_image:
                  type: "string"
                  format: "binary"
                  description: "アップロードするプロフィール画像"
      responses:
        "200":
          description: "プロフィール画像が正常に更新されました。"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "プロフィール画像が更新されました。"
        "401":
          description: "認証エラー。トークンが無効または未提供。"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "無効なトークンです"

  /makeproject:
    post:
      summary: 新規プロジェクトの作成
      description: ユーザーが新しいプロジェクトを作成し、最初のコミットを追加するエンドポイントです。プロジェクト名、説明、タグ、コミットメッセージ、およびコミット画像を提供します。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                project_name:
                  type: string
                  description: プロジェクトの名前
                project_description:
                  type: string
                  description: プロジェクトの説明
                tags:
                  type: string
                  description: プロジェクトに関連するタグ（カンマ区切り）
                commit_message:
                  type: string
                  description: コミットメッセージ
                commit_image:
                  type: string
                  format: binary
                  description: 最初のコミットの画像ファイル
      responses:
        "201":
          description: 成功時に作成されたプロジェクトのIDを返します
          content:
            application/json:
              schema:
                type: object
                properties:
                  project_id:
                    type: integer
                    description: 作成されたプロジェクトのID
        "400":
          description: 画像がアップロードされていない場合のエラーメッセージ
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: 画像ファイルがアップロードされていない場合のエラーメッセージ

  /project/{project_id}:
    get:
      summary: プロジェクトの詳細情報の取得
      description: 指定したプロジェクトの詳細情報（名前、説明、公開状態、最新のコミット画像）を取得するエンドポイントです。
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: integer
          description: プロジェクトのID
      responses:
        "200":
          description: プロジェクトの詳細情報が正常に返されます
          content:
            application/json:
              schema:
                type: object
                properties:
                  project_id:
                    type: integer
                    description: プロジェクトのID
                  name:
                    type: string
                    description: プロジェクトの名前
                  description:
                    type: string
                    description: プロジェクトの説明
                  is_public:
                    type: boolean
                    description: プロジェクトの公開状態
                  latest_commit_image:
                    type: string
                    description: 最新のコミットの画像
    patch:
      summary: プロジェクトの公開状態の変更
      description: 指定したプロジェクトの公開状態（公開/非公開）を変更するエンドポイントです。
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: integer
          description: プロジェクトのID
      responses:
        "200":
          description: 公開状態の変更が正常に反映されます
    delete:
      summary: プロジェクトの削除
      description: 指定したプロジェクトを削除するエンドポイントです。
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: integer
          description: プロジェクトのID
      responses:
        "200":
          description: プロジェクトが正常に削除されます

  /project/{project_id}/invite:
    get:
      summary: プロジェクトへの招待ユーザーを検索
      description: プロジェクトに招待するユーザーをユーザー名で検索して一覧表示します。
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: integer
          description: 招待を行うプロジェクトのID
        - in: query
          name: search
          schema:
            type: string
          description: 検索するユーザー名
      responses:
        '200':
          description: ユーザー検索結果を取得しました。
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: ユーザーID
                        username:
                          type: string
                          description: ユーザー名
        '401':
          description: 認証が必要です。
    post:
      summary: プロジェクトへのユーザー招待
      description: 指定したユーザーIDのユーザーをプロジェクトに招待し、通知を作成します。
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: integer
          description: 招待を行うプロジェクトのID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: 招待するユーザーのID
      responses:
        '200':
          description: 招待が成功しました。
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 招待が成功したユーザー名のメッセージ
        '404':
          description: 招待するユーザーが見つかりませんでした。
        '401':
          description: 認証が必要です。

  /project/{project_id}/commit:
    post:
      summary: プロジェクトへのコミット作成
      description: プロジェクトに新しいコミットを追加するエンドポイントです。コミットメッセージとコミット画像を受け取ります。画像が提供されない場合は400エラーを返します。
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: integer
          description: コミットを追加するプロジェクトのID
      requestBody:
        description: コミットメッセージとコミット画像を含むリクエストボディ
        content:
          application/json:
            schema:
              type: object
              properties:
                commit_message:
                  type: string
                  description: コミットメッセージ
                commit_image:
                  type: string
                  format: binary
                  description: コミットの画像ファイル
      responses:
        "201":
          description: コミットが正常に作成されたことを示します
        "400":
          description: コミット画像が提供されていない場合に返されるエラーレスポンス

  /project/{project_id}/commits:
    get:
      summary: プロジェクトのコミット履歴を取得
      description: 指定したプロジェクトのコミット履歴を取得するエンドポイントです。コミットメッセージ、コミット画像、投稿日時などが返されます。
      parameters:
        - in: path
          name: project_id
          required: true
          schema:
            type: integer
          description: プロジェクトのID
      responses:
        "200":
          description: プロジェクトのコミット履歴が返されます
          content:
            application/json:
              schema:
                type: object
                properties:
                  commits:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: コミットのID
                        commit_message:
                          type: string
                          description: コミットメッセージ
                        commit_image:
                          type: string
                          description: コミット画像のパス
                        date_posted:
                          type: string
                          format: date-time
                          description: コミットが投稿された日時

  /project/{project_id}/commit/{commit_id}:
    get:
      summary: コミット詳細情報の取得
      description: |
        指定したプロジェクトとコミットIDに関連するコミットの詳細情報を取得します。
        返される情報にはコミットメッセージ、関連するコメント、プロジェクト名、コミット画像、コミット日時などが含まれます。
      parameters:
        - name: project_id
          in: path
          description: プロジェクトのID
          required: true
          schema:
            type: integer
        - name: commit_id
          in: path
          description: コミットのID
          required: true
          schema:
            type: integer
      responses:
        200:
          description: コミットの詳細情報
          content:
            application/json:
              schema:
                type: object
                properties:
                  project_id:
                    type: integer
                    description: プロジェクトID
                  project_name:
                    type: string
                    description: プロジェクト名
                  commit_id:
                    type: integer
                    description: コミットID
                  commit_message:
                    type: string
                    description: コミットメッセージ
                  commit_image:
                    type: string
                    description: コミット画像のパス（もしあれば）
                  date_posted:
                    type: string
                    format: date-time
                    description: コミットの投稿日時
                  comments:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: コメントのID
                        content:
                          type: string
                          description: コメントの内容
                        created_at:
                          type: string
                          format: date-time
                          description: コメントが作成された日時
                        user:
                          type: object
                          properties:
                            id:
                              type: integer
                              description: コメントを投稿したユーザーのID
                            username:
                              type: string
                              description: コメントを投稿したユーザーの名前
        400:
          description: 不正なリクエスト（コメントの内容が空の場合など）
        404:
          description: プロジェクトまたはコミットが見つからない場合
    post:
      summary: コミットにコメントを追加
      description: |
        指定したコミットに新しいコメントを追加します。
        コメントはコミットIDに関連付けられ、プロジェクトのメンバーに通知されます。
      parameters:
        - name: project_id
          in: path
          description: プロジェクトのID
          required: true
          schema:
            type: integer
        - name: commit_id
          in: path
          description: コミットのID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: コメントの内容
                  example: "This is a comment"
      responses:
        200:
          description: コメントが正常に追加され、通知が送信された
        400:
          description: コメント内容が空の場合
          
  /notification/{notification_id}/respond/{response}:
    patch:
      summary: "招待に対する応答"
      description: "ユーザーが通知を受け取り、その通知に対して招待を承諾または拒否するエンドポイントです。"
      parameters:
        - name: notification_id
          in: path
          required: true
          description: "通知のID"
          schema:
            type: integer
        - name: response
          in: path
          required: true
          description: "招待に対する応答（'accept' または 'decline'）"
          schema:
            type: string
      responses:
        '200':
          description: "招待の応答が成功しました"
        '404':
          description: "通知が見つかりませんでした"
